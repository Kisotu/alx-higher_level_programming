******
Usage:

The class MyList inherits from list.

******
Instantiation:

The class can be instantiated wihout args, it returns an empty list.

::
 
    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>

::

    >>> print(my_list)
    []

::
    >>> my_list = MyList([67, 5, 7])
    >>> print(my_list)
    [67, 5, 7]

::

    >>> my_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable


A ``TypeError`` will be raised for more than one instantiation args.

::
    >>> my_list = MyList([3, 5], [7, 9])
    Traceback (most recent call last):
    TypeError: list expected at most 1 argument, got 2

*****
Usage

``MyList`` is an inherited ``list`` class, and features same methods.
Elements can be added to ``MyList`` with the ``append()`` method.

::

    >>> my_list = MyList()
    >>> my_list.append(4)
    >>> my_list.append(6)
    >>> my_list.append(7)
    >>> print(my_list)
    [4, 6, 7]

With indexing:

::

    >>> my_list[1] = 9
    >>> print(my_list)
    [4, 9, 7]

Removed with the ``remove()`` method.

::

    >>> my_list.remove(7)
    >>> print(my_list)
    [4, 9]

See the documentation on Python lists for more built-in methods.

``print_sorted`` Method
***********************

``MyList`` implements a single method - a public instance method
``print_sorted(self)``.

::

    >>> my_list = MyList()
    >>> print(my_list.print_sorted)
    <bound method MyList.print_sorted of []>

The method takes no arguments - TypeError will be raised if an argument is
provided.

::

    >>> my_list.print_sorted(1)
    Traceback (most recent call last):
    TypeError: MyList.print_sorted() takes 1 positional argument but 2 were given

The method prints the list in ascending sorted order.

::

    >>> my_list.append(8)
    >>> my_list.append(9)
    >>> my_list.append(23)
    >>> my_list.append(5)
    >>> my_list.append(1)
    >>> print(my_list)
    [8, 9, 23, 5, 1]

::

    >>> my_list.print_sorted()
    [1, 5, 8, 9, 23]

The order of the original list is not altered after a call to the method.

::

    >>> print(my_list)
    [8, 9, 23, 5, 1]

Lists of strings are sorted lexographically.

::

    >>> my_list = MyList()
    >>> my_list.append("Isaac")
    >>> my_list.append("Joshua")
    >>> my_list.append("Anna")
    >>> my_list.append("Wayne")
    >>> my_list.append("Kimba")
    >>> print(my_list)
    ['Isaac', 'Joshua', 'Anna', 'Wayne', 'Kimba']

::

    >>> my_list.print_sorted()
    ['Anna', 'Isaac', 'Joshua', 'Kimba', 'Wayne']

Another friendly reminder that the original list is unaltered :)

::

    >>> print(my_list)
    ['Isaac', 'Joshua', 'Anna', 'Wayne', 'Kimba']

Nothing to sort with empty lists.

::

    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []

If ``print_sorted(...)`` is called on a list of different types, a TypeError
will be raised.

::

    >>> my_list = MyList([6, 67, 554, "Hello"])
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    TypeError: '<' not supported between instances of 'str' and 'int'
